# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Faction {
  """ID фракции"""
  id: ID!

  """Название фракции"""
  name: String!

  """Описание фракции"""
  description: String!

  """Логотип фракции"""
  logo: String!

  """Классы фракции"""
  characterClasses: [CharacterClass!]!
}

type CharacterSkill {
  id: String!

  """Навык"""
  skill: Skill!

  """Время последнего использования"""
  lastUsedAt: Float

  """Время окончания кулдауна"""
  cooldownEnd: Float

  """Уровень навыка"""
  level: Int!
}

type Skill {
  """ID навыка"""
  id: String!

  """Класс, к которому относится навык"""
  characterClass: CharacterClass!

  """Название навыка"""
  name: String!

  """Ключ иконки навыка"""
  icon: String!

  """Кулдаун в миллисекундах"""
  cooldownMs: Int!

  """Стоимость маны"""
  manaCost: Int!

  """Наносимый урон"""
  damage: Int!

  """Восстанавливаемое здоровье"""
  heal: Int!

  """Дистанция"""
  range: Int!

  """Дополнительные параметры в JSON"""
  extraParams: String
  characterSkills: CharacterSkill!
}

type CharacterClass {
  """ID класса"""
  id: ID!

  """Название класса"""
  name: String!

  """Описание класса"""
  description: String!

  """Логотип класса"""
  logo: String!

  """Фракция класса"""
  faction: Faction!

  """Персонажи класса"""
  characters: [Character!]!

  """Список навыков класса"""
  skills: [Skill!]!
}

type Item {
  id: ID!

  """Название предмета"""
  name: String!

  """Описание предмета"""
  description: String!

  """Тип предмета"""
  type: ItemTypeEnum!

  """Сила предмета"""
  power: Float!

  """Прочность предмета"""
  durability: Float!

  """Владелец предмета"""
  owner: Character!
}

"""Типы предметов"""
enum ItemTypeEnum {
  WEAPON
  ARMOR
  POTION
  RESOURCE
  MISC
}

type LocationLayer {
  """ID слоя"""
  id: ID!

  """Локация, к которой принадлежит слой"""
  location: Location!

  """Название слоя"""
  name: String!

  """Тип слоя (tile, passable и т.п.)"""
  type: String!

  """Порядок отрисовки"""
  layerIndex: Float!

  """Двумерный массив идентификаторов тайлов"""
  tileData: [[Float!]!]!

  """
  Двумерный массив булевых значений, определяющих проходимость клеток слоя
  """
  passableData: [[Float!]!]!
}

type Location {
  """ID локации"""
  id: ID!

  """Название локации"""
  name: String!

  """Координата старта X"""
  startX: Float!

  """Координата старта Y"""
  startY: Float!
  width: Float!
  height: Float!
  tilesetKey: String!
  mapImageUrl: String!

  """Ширина тайла"""
  tileWidth: Int!

  """Высота тайла"""
  tileHeight: Int!
  layers: [LocationLayer!]!
  characters: [Character!]!
}

type Character {
  """ID персонажа"""
  id: ID!

  """Имя персонажа"""
  name: String!

  """Уровень персонажа"""
  level: Int!

  """Максимальное здоровье персонажа"""
  maxHp: Int!

  """Текущее здоровье персонажа"""
  hp: Int!

  """Физический урон"""
  basePhysicalDamage: Int!

  """Магический урон"""
  baseMagicDamage: Int!

  """Броня персонажа (снижает физ. урон)"""
  defense: Int!

  """Магическая защита (снижает маг. урон)"""
  magicDefense: Int!

  """Множитель крит. урона"""
  critMultiplier: Float!

  """Скорость атаки (уд/сек)"""
  attackSpeed: Float!

  """Дистанция атаки (в тайлах)"""
  attackRange: Int!

  """Опыт персонажа"""
  experience: Int!

  """Опыт до следующего уровня"""
  experienceToNextLevel: Int!

  """Очки навыков"""
  skillPoints: Int!

  """Жив ли персонаж"""
  isAlive: Boolean!

  """Статус удален или нет"""
  isDeleted: Boolean!

  """Аккаунт пользователя"""
  user: User!

  """Класс персонажа"""
  characterClass: CharacterClass!

  """Инвентарь персонажа"""
  items: [Item!]!

  """Локация персонажа"""
  location: Location

  """X координата позиции игрока"""
  x: Int!

  """Y координата позиции игрока"""
  y: Int!

  """Айди локации в которой находится игрок"""
  locationId: String!

  """Навыки персонаж"""
  characterSkills: [CharacterSkill!]!
}

type User {
  """ID пользователя"""
  id: ID!

  """Имя пользователя"""
  name: String!

  """Email пользователя"""
  email: String!

  """Password пользователя"""
  password: String!

  """Персонажи аккаунта"""
  persons: [Character!]!

  """Refresh token"""
  refreshToken: String

  """Дата создания пользователя"""
  createdAt: Timestamp!

  """Дата последнего обновления пользователя"""
  updatedAt: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Auth {
  """Access token"""
  accessToken: String!

  """RefreshToken token"""
  refreshToken: String!
}

type Logout {
  """Сообщение о выходе"""
  message: String!
}

type Query {
  findAllUsers: [User!]!
  findOneUser(id: ID!): User!
  getCurrentUser: User!
  faction(id: Int!): Faction!
  findUserCharacters: [Character!]!
  character(id: Int!): Character!
  characterSkill(id: Int!): CharacterSkill!
  characterClass(id: Int!): CharacterClass!
  skill(id: Int!): Skill!
  item(id: Int!): Item!
  location: [Location!]!
  findLocationById(id: ID!): Location!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  signUp(signUpInput: RegisterInput!): Auth!
  signIn(signInInput: LoginInput!): Auth!
  logout: Logout!
  refreshTokens: Auth!
  createFaction(createFactionInput: CreateFactionInput!): Faction!
  updateFaction(updateFactionInput: UpdateFactionInput!): Faction!
  removeFaction(id: Int!): Faction!
  createCharacter(createCharacterInput: CreateCharacterInput!): Character!
  updateCharacter(updateCharacterInput: UpdateCharacterInput!): Character!
  removeCharacter(id: Int!): Character!
  createCharacterSkill(createCharacterSkillInput: CreateCharacterSkillInput!): CharacterSkill!
  updateCharacterSkill(updateCharacterSkillInput: UpdateCharacterSkillInput!): CharacterSkill!
  removeCharacterSkill(id: Int!): CharacterSkill!
  createCharacterClass(createCharacterClassInput: CreateCharacterClassInput!): CharacterClass!
  updateCharacterClass(updateCharacterClassInput: UpdateCharacterClassInput!): CharacterClass!
  removeCharacterClass(id: Int!): CharacterClass!
  createSkill(createSkillInput: CreateSkillInput!): Skill!
  updateSkill(updateSkillInput: UpdateSkillInput!): Skill!
  removeSkill(id: Int!): Skill!
  createItem(createItemInput: CreateItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  removeItem(id: Int!): Item!
  createLocation(createLocationInput: CreateLocationInput!): Location!
  updateLocation(updateLocationInput: UpdateLocationInput!): Location!
  removeLocation(id: Int!): Location!
}

input CreateUserInput {
  """Имя пользователя"""
  name: String!

  """Email пользователя"""
  email: String!

  """Password пользователя"""
  password: String!

  """Токен обновления"""
  refreshToken: String
}

input RegisterInput {
  """Имя пользователя"""
  name: String!

  """Email пользователя"""
  email: String!

  """Password пользователя"""
  password: String!
}

input LoginInput {
  """Email пользователя"""
  email: String!

  """Password пользователя"""
  password: String!
}

input CreateFactionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateFactionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCharacterInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCharacterInput {
  id: String!
}

input CreateCharacterSkillInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCharacterSkillInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCharacterClassInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCharacterClassInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSkillInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSkillInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateItemInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateItemInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateLocationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateLocationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}